{"version":3,"sources":["../src/index.js"],"names":["Mongoose","Promise","resolve","reject","config","app","connections","mongodb","default","mongoose","connect","host","database","db","connection","on","listenError","err","once","listenOpen","callback","models","log","error","folderPath","process","cwd","modelPath","exists","files","model","modelName","console"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqBA,Q;;;;;;;;;;;;;;;;;;;;;uBAGT,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,sBAAMC,SAAS,OAAKC,GAAL,CAASD,MAAT,CAAgBE,WAAhB,CAA4BC,OAA5B,CAAoCC,OAAnD;;AAEA,yBAAKH,GAAL,CAASI,QAAT,GAAoB,mBAASC,OAAT,gBAA8BN,OAAOO,IAArC,SAA6CP,OAAOQ,QAApD,CAApB;AACA,yBAAKP,GAAL,CAASI,QAAT,CAAkBR,OAAlB;;AAEA,sBAAMY,KAAK,OAAKR,GAAL,CAASI,QAAT,CAAkBK,UAA7B;AACAD,qBAAGE,EAAH,CAAM,OAAN,EAAe,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACvCd,2BAAOc,GAAP;AACD,mBAFD;AAGAJ,qBAAGK,IAAH,CAAQ,MAAR,EAAgB,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC5ClB,4BAAQ,IAAR;AACD,mBAFD;AAGD,iBAbK,C;;;;AAeN,oBAAI,CAAC,KAAKG,GAAL,CAASgB,MAAd,EAAsB;AACpB,uBAAKhB,GAAL,CAASgB,MAAT,GAAkB,EAAlB;AACD;;;;;;;;AAED,qBAAKhB,GAAL,CAASiB,GAAT,CAAaC,KAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKIC,0B,GAAa,eAAKtB,OAAL,CACjBuB,QAAQC,GAAR,EADiB,EAEjB,KAAKtB,MAAL,CAAYuB,SAAZ,IAAyB,eAFR,C;;uBAKE,aAAGC,MAAH,CAAUJ,UAAV,C;;;AAAfI,sB;;AACN,oBAAIA,MAAJ,EAAY;AACJC,uBADI,GACI,0BAAWL,UAAX,CADJ;;;AAGV,wCAAOK,KAAP,EAAc,UAACR,MAAD,EAAY;AACxB,0CAAOA,MAAP,EAAe,UAACS,KAAD,EAAQC,SAAR,EAAsB;AACnCC,8BAAQV,GAAR,CAAYQ,MAAM,OAAKzB,GAAX,qBAAZ;AACA,6BAAKA,GAAL,CAASgB,MAAT,CAAgBU,SAAhB,IAA6BD,MAAM,OAAKzB,GAAX,qBAA7B;AACD,qBAHD;AAID,mBALD;AAMD;;;;;;;;;;;;;;;;;;;;;kBA1CgBL,Q","file":"index.js","sourcesContent":["import Base from 'magnet-core/dist/base';\nimport mongoose from 'mongoose';\nimport fs from 'mz/fs';\nimport requireAll from 'require-all';\nimport path from 'path';\nimport bluebird from 'bluebird';\nimport forOwn from 'lodash/forOwn';\n\nexport default class Mongoose extends Base {\n  async setup() {\n    try {\n      await new Promise((resolve, reject) => {\n        const config = this.app.config.connections.mongodb.default;\n\n        this.app.mongoose = mongoose.connect(`mongodb://${config.host}/${config.database}`);\n        this.app.mongoose.Promise = bluebird;\n\n        const db = this.app.mongoose.connection;\n        db.on('error', function listenError(err) {\n          reject(err);\n        });\n        db.once('open', function listenOpen(callback) {\n          resolve(true);\n        });\n      });\n\n      if (!this.app.models) {\n        this.app.models = {};\n      }\n    } catch (err) {\n      this.app.log.error(err);\n    }\n  }\n\n  async start() {\n    const folderPath = path.resolve(\n      process.cwd(),\n      this.config.modelPath || 'server/models'\n    );\n\n    const exists = await fs.exists(folderPath);\n    if (exists) {\n      const files = requireAll(folderPath);\n\n      forOwn(files, (models) => {\n        forOwn(models, (model, modelName) => {\n          console.log(model(this.app, mongoose));\n          this.app.models[modelName] = model(this.app, mongoose);\n        });\n      });\n    }\n  }\n}\n"]}
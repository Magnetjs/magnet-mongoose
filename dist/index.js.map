{"version":3,"sources":["../src/index.js"],"names":["Mongoose","Promise","resolve","reject","config","app","mongoose","connect","host","database","db","connection","on","listenError","err","once","listenOpen","callback","models","log","error","folderPath","process","cwd","modelPath","exists","files","model","modelName"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqBA,Q;;;;;;;;;;;;;;;;;;;;;uBAGT,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,sBAAMC,SAAS,OAAKC,GAAL,CAASD,MAAT,CAAgBE,QAA/B;;AAEA,yBAAKD,GAAL,CAASC,QAAT,GAAoB,mBAASC,OAAT,gBAA8BH,OAAOI,IAArC,SAA6CJ,OAAOK,QAApD,CAApB;AACA,yBAAKJ,GAAL,CAASC,QAAT,CAAkBL,OAAlB;;AAEA,sBAAMS,KAAK,OAAKL,GAAL,CAASC,QAAT,CAAkBK,UAA7B;AACAD,qBAAGE,EAAH,CAAM,OAAN,EAAe,SAASC,WAAT,CAAsBC,GAAtB,EAA2B;AACxCX,2BAAOW,GAAP;AACD,mBAFD;AAGAJ,qBAAGK,IAAH,CAAQ,MAAR,EAAgB,SAASC,UAAT,CAAqBC,QAArB,EAA+B;AAC7Cf,4BAAQ,IAAR;AACD,mBAFD;AAGD,iBAbK,C;;;;AAeN,oBAAI,CAAC,KAAKG,GAAL,CAASa,MAAd,EAAsB;AACpB,uBAAKb,GAAL,CAASa,MAAT,GAAkB,EAAlB;AACD;;;;;;;;AAED,qBAAKb,GAAL,CAASc,GAAT,CAAaC,KAAb;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKIC,0B,GAAa,eAAKnB,OAAL,CACjBoB,QAAQC,GAAR,EADiB,EAEjB,KAAKnB,MAAL,CAAYoB,SAAZ,IAAyB,eAFR,C;;uBAKE,aAAGC,MAAH,CAAUJ,UAAV,C;;;AAAfI,sB;;AACN,oBAAIA,MAAJ,EAAY;AACJC,uBADI,GACI,0BAAWL,UAAX,CADJ;;;AAGV,wCAAOK,KAAP,EAAc,UAACR,MAAD,EAAY;AACxB,0CAAOA,MAAP,EAAe,UAACS,KAAD,EAAQC,SAAR,EAAsB;AACnC,6BAAKvB,GAAL,CAASa,MAAT,CAAgBU,SAAhB,IAA6BD,MAAM,OAAKtB,GAAX,CAA7B;AACD,qBAFD;AAGD,mBAJD;AAKD;;;;;;;;;;;;;;;;;;;;;kBAzCgBL,Q","file":"index.js","sourcesContent":["import Base from 'magnet-core/dist/base'\nimport mongoose from 'mongoose'\nimport fs from 'mz/fs'\nimport requireAll from 'require-all'\nimport path from 'path'\nimport bluebird from 'bluebird'\nimport forOwn from 'lodash/forOwn'\n\nexport default class Mongoose extends Base {\n  async setup () {\n    try {\n      await new Promise((resolve, reject) => {\n        const config = this.app.config.mongoose\n\n        this.app.mongoose = mongoose.connect(`mongodb://${config.host}/${config.database}`)\n        this.app.mongoose.Promise = bluebird\n\n        const db = this.app.mongoose.connection\n        db.on('error', function listenError (err) {\n          reject(err)\n        })\n        db.once('open', function listenOpen (callback) {\n          resolve(true)\n        })\n      })\n\n      if (!this.app.models) {\n        this.app.models = {}\n      }\n    } catch (err) {\n      this.app.log.error(err)\n    }\n  }\n\n  async start () {\n    const folderPath = path.resolve(\n      process.cwd(),\n      this.config.modelPath || 'server/models'\n    )\n\n    const exists = await fs.exists(folderPath)\n    if (exists) {\n      const files = requireAll(folderPath)\n\n      forOwn(files, (models) => {\n        forOwn(models, (model, modelName) => {\n          this.app.models[modelName] = model(this.app)\n        })\n      })\n    }\n  }\n}\n"]}
{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;IAEqB,Q;;;;;;;;;;;;;;;;;;;;;uBAGT,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACrC,sBAAM,SAAS,OAAK,GAAL,CAAS,MAAT,CAAgB,WAAhB,CAA4B,OAA5B,CAAoC,OAAnD;;AAEA,yBAAK,GAAL,CAAS,QAAT,GAAoB,mBAAS,OAAT,gBAA8B,OAAO,IAArC,SAA6C,OAAO,QAApD,CAApB;;AAEA,sBAAM,KAAK,OAAK,GAAL,CAAS,QAAT,CAAkB,UAA7B;AACA,qBAAG,EAAH,CAAM,OAAN,EAAe,SAAS,WAAT,CAAqB,GAArB,EAA0B;AACvC,2BAAO,GAAP;AACD,mBAFD;AAGA,qBAAG,IAAH,CAAQ,MAAR,EAAgB,SAAS,UAAT,CAAoB,QAApB,EAA8B;AAC5C,4BAAQ,IAAR;AACD,mBAFD;AAGD,iBAZK,C;;;;AAcN,oBAAI,CAAC,KAAK,GAAL,CAAS,MAAd,EAAsB;AACpB,uBAAK,GAAL,CAAS,MAAT,GAAkB,EAAlB;AACD;;;;;;;;AAED,qBAAK,GAAL,CAAS,GAAT,CAAa,KAAb;;;;;;;;;;;;;;;;;;;;;;YAKI,U,EAKA,M,EAEE,K;;;;;AAPF,0B,GAAa,eAAK,OAAL,CACjB,QAAQ,GAAR,EADiB,EAEjB,KAAK,MAAL,CAAY,SAAZ,IAAyB,eAFR,C;;uBAKE,aAAG,MAAH,CAAU,UAAV,C;;;AAAf,sB;;AACN,oBAAI,MAAJ,EAAY;AACJ,uBADI,GACI,0BAAW,UAAX,CADJ;;;AAGV,wCAAO,KAAP,EAAc,UAAC,MAAD,EAAY;AACxB,0CAAO,MAAP,EAAe,UAAC,KAAD,EAAQ,SAAR,EAAsB;AACnC,6BAAK,GAAL,CAAS,MAAT,CAAgB,SAAhB,IAA6B,MAAM,OAAK,GAAX,qBAA7B;AACD,qBAFD;AAGD,mBAJD;AAKD;;;;;;;;;;;;;;;;;;;;;kBAxCgB,Q","file":"index.js","sourcesContent":["import Base from 'magnet-core/dist/base';\nimport mongoose from 'mongoose';\nimport fs from 'mz/fs';\nimport requireAll from 'require-all';\nimport path from 'path';\nimport forOwn from 'lodash/forOwn';\n\nexport default class Mongoose extends Base {\n  async setup() {\n    try {\n      await new Promise((resolve, reject) => {\n        const config = this.app.config.connections.mongodb.default;\n\n        this.app.mongoose = mongoose.connect(`mongodb://${config.host}/${config.database}`);\n\n        const db = this.app.mongoose.connection;\n        db.on('error', function listenError(err) {\n          reject(err);\n        });\n        db.once('open', function listenOpen(callback) {\n          resolve(true);\n        });\n      });\n\n      if (!this.app.models) {\n        this.app.models = {};\n      }\n    } catch (err) {\n      this.app.log.error(err);\n    }\n  }\n\n  async start() {\n    const folderPath = path.resolve(\n      process.cwd(),\n      this.config.modelPath || 'server/models'\n    );\n\n    const exists = await fs.exists(folderPath);\n    if (exists) {\n      const files = requireAll(folderPath);\n\n      forOwn(files, (models) => {\n        forOwn(models, (model, modelName) => {\n          this.app.models[modelName] = model(this.app, mongoose);\n        });\n      });\n    }\n  }\n}\n"]}